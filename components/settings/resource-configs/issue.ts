import { z } from 'zod';
import { StatusBadgeField } from '../fields/status-badge-field';

export const issueConfig = {
  name: 'Issue',
  actionPrefix: 'issue',
  displayFields: [
    { key: 'identifier', label: 'ID' },
    { key: 'title', label: 'Title' },
    { key: 'state', label: 'Status', render: StatusBadgeField },
    { key: 'assignee', label: 'Assignee' },
    { key: 'team', label: 'Team' },
    { key: 'project', label: 'Project' },
    { key: 'issueType', label: 'Type' },
    { key: 'priority', label: 'Priority' },
    { key: 'createdAt', label: 'Created' }
  ],
  searchFields: ['title', 'description', 'identifier'],
  createFields: [
    { key: 'title', label: 'Title', type: 'text', required: true },
    { key: 'description', label: 'Description', type: 'textarea' },
    { key: 'teamId', label: 'Team', type: 'select', required: true },
    { key: 'projectId', label: 'Project', type: 'select' },
    { key: 'issueTypeId', label: 'Issue Type', type: 'select', required: true },
    { key: 'stateId', label: 'Status', type: 'select', required: true },
    { key: 'assigneeId', label: 'Assignee', type: 'select' },
    { key: 'priority', label: 'Priority', type: 'select' }
  ],
  validationSchema: z.object({
    title: z.string().min(1, 'Title is required'),
    description: z.string().optional(),
    teamId: z.string().min(1, 'Team is required'),
    projectId: z.string().optional(),
    issueTypeId: z.string().min(1, 'Issue type is required'),
    stateId: z.string().min(1, 'Status is required'),
    assigneeId: z.string().optional(),
    priority: z.enum(['LOW', 'MEDIUM', 'HIGH', 'URGENT']).optional()
  }),
  // The factory will auto-generate handlers with complex relations
};

// Handlers are now auto-generated by DatabaseFactory!
// The factory already handles complex issue relations in the include options 