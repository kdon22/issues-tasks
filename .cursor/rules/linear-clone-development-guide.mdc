# Linear Clone Development Guide

This is a **Linear clone** built with **Next.js 14**, **TypeScript**, **Prisma**, and **shadcn/ui**. Our core principles are **DRY (Don't Repeat Yourself)**, **offline-first architecture**, and **mobile-beautiful UX**.

## üéØ Core Development Principles

### 1. **DRY First - Think Before You Build**
- **ALWAYS** analyze if there's a DRY way before writing any code
- Check existing patterns and hooks before creating new ones
- Look for opportunities to eliminate repetitive code (aim for 70%+ reduction)
- Use our established hook factories and utilities

### 2. **Offline-First Strategy (Required)**
- Every feature MUST work offline
- Use IndexedDB for local storage and caching
- Implement background sync with retry logic
- Show sync status and pending operations to users
- Handle conflicts gracefully with resolution strategies

### 3. **Mobile-First & Touch-Optimized**
- Design for mobile first, then enhance for desktop
- Implement touch gestures (swipe actions, pull-to-refresh)
- Use proper touch targets (44px minimum)
- Native mobile UX patterns (bottom sheets, FABs, etc.)

## üìÅ File & Naming Conventions

### File Naming
- **kebab-case** for all files: `use-offline-sync.ts`, `mobile-responsive.tsx`
- **PascalCase** for React components: `MobileHeader`, `SwipeCard`
- **camelCase** for functions and variables: `useResource`, `handleSubmit`

### Folder Structure
```
components/ui/          # Reusable UI components (CHECK HERE FIRST!)
lib/hooks/             # Custom hooks (useApi, useResource, etc.)
lib/api/               # API utilities and configs
app/                   # Next.js app router pages
```

## üîß Established Architecture Patterns

### Core Hooks (USE THESE!)

#### **useApi Hook** ([use-api.ts](mdc:lib/hooks/use-api.ts))
- Offline-first API calls with IndexedDB caching
- Automatic retry logic and error handling
- Network status monitoring
```typescript
const api = useApi<T[]>('/api/endpoint', { cacheKey: 'resource-name' });
const { data, loading, error, get, post, put, delete } = api;
```

#### **useResource Hook** ([use-resource.ts](mdc:lib/hooks/use-resource.ts))
- DRY CRUD operations for any resource
- Optimistic updates with automatic rollback
- Integrated offline sync
```typescript
const { items, loading, create, update, delete, refetch } = useResource({
  endpoint: '/api/resource',
  cacheKey: 'resource-name'
});
```

#### **useOfflineSync Hook** ([use-offline-sync.ts](mdc:lib/hooks/use-offline-sync.ts))
- Background sync with priority queues
- Conflict resolution strategies
- Sync status monitoring
```typescript
const { isOnline, pendingCount, syncNow, queueOperation } = useOfflineSync();
```

### Mobile-Responsive Components ([mobile-responsive.tsx](mdc:components/ui/mobile-responsive.tsx))

**ALWAYS use these for mobile-optimized experiences:**

- **MobileHeader**: Headers with back navigation, sync status, offline indicators
- **MobileList**: Pull-to-refresh, search, infinite scroll patterns
- **SwipeCard**: Left/right swipe actions (edit/delete)
- **MobileForm**: Full-screen forms with sticky bottom actions
- **MobileBottomSheet**: Native bottom sheet with snap points
- **MobileFAB**: Floating action buttons
- **useIsMobile()**: Viewport detection hook
- **useTouchGestures()**: Custom touch gesture handling

## üé® UI Component Guidelines

### Before Building ANY Component:
1. **CHECK** [components/ui](mdc:components/ui) directory first
2. **REUSE** existing shadcn/ui components: Button, Input, Card, etc.
3. **EXTEND** rather than rebuild from scratch
4. **COMPOSE** mobile-responsive wrappers around base components

### Component Patterns
```typescript
// ‚úÖ GOOD: Use established patterns
const { items, loading, create, update } = useResource(config);
<MobileList items={items} renderItem={ItemCard} />

// ‚ùå BAD: Reinventing CRUD logic
const [data, setData] = useState([]);
const [loading, setLoading] = useState(false);
// ... 50+ lines of boilerplate
```

## üöÄ API & Data Patterns

### API Structure
- RESTful endpoints: `/api/resource` and `/api/resource/[id]`
- Consistent response format: `{ data: T[], error?: string }`
- CRUD factory pattern in [lib/api/crud-factory.ts](mdc:lib/api/crud-factory.ts)

### Database (Prisma)
- Schema in [prisma/schema.prisma](mdc:prisma/schema.prisma)
- Use Prisma Client for all database operations
- Handle database connections properly in API routes

### State Management
- **React hooks** for local state
- **useResource** for server state with caching
- **IndexedDB** for offline persistence
- **NO** Redux/Zustand unless absolutely necessary

## üì± Mobile UX Requirements

### Touch Interactions
- **Swipe gestures**: Edit (left), Delete (right)
- **Pull-to-refresh**: All list views
- **Touch feedback**: Active states on all interactive elements
- **Long press**: Context menus and secondary actions

### Responsive Design
```typescript
const isMobile = useIsMobile(); // Use this hook
// Conditional rendering based on viewport
{isMobile ? <MobileComponent /> : <DesktopComponent />}
```

### Navigation
- **Mobile**: Bottom navigation, floating actions, bottom sheets
- **Desktop**: Sidebar navigation, modals, dropdowns

## üîÑ Offline-First Implementation

### Required for Every Feature:
1. **Cache Strategy**: 5-minute cache for GET requests
2. **Queue Operations**: POST/PUT/DELETE when offline
3. **Background Sync**: Auto-sync when online
4. **User Feedback**: Show sync status, pending count
5. **Conflict Resolution**: Handle server conflicts gracefully

### Sync Priority Levels:
- **High**: User-initiated actions (create, update)
- **Medium**: Bulk operations
- **Low**: Background cleanup

## üéØ Performance Guidelines

### Loading States
- **Optimistic updates** for instant feedback
- **Skeleton loaders** for initial loads
- **Progressive loading** for large datasets

### Bundle Size
- **Code splitting** for routes
- **Lazy loading** for heavy components
- **Tree shaking** for unused utilities

## üß™ Code Quality Standards

### TypeScript
- **Strict mode** enabled
- **Interface definitions** for all data structures
- **Type guards** for runtime validation
- **Generic hooks** for reusability

### Error Handling
```typescript
// ‚úÖ GOOD: Integrated error handling
const { items, error } = useResource(config);
if (error) return <ErrorState error={error} />;

// ‚ùå BAD: Manual try/catch everywhere
try {
  const response = await fetch(url);
  // ... manual error handling
} catch (error) {
  // ... repetitive error logic
}
```

## üìä Established Component Examples

### Settings Pages Pattern
All settings pages follow this DRY pattern:
```typescript
// Members page example: [app/settings/members/page.tsx](mdc:app/settings/members/page.tsx)
const { items, loading, error, create, update, delete } = useMembers();
const { isOnline, lastSync, pendingCount } = useOfflineSync();

return (
  <div className="flex-1 flex flex-col">
    <MobileHeader title="Members" isOnline={isOnline} lastSync={lastSync} />
    <MobileList items={items} renderItem={MemberCard} />
    <MobileFAB onClick={() => setFormOpen(true)} />
    <MobileBottomSheet isOpen={formOpen}>
      <MobileForm onSubmit={handleSubmit} />
    </MobileBottomSheet>
  </div>
);
```

### Form Handling
```typescript
// ‚úÖ GOOD: Use MobileForm with validation
<MobileForm
  title="Create Item"
  onSubmit={handleSubmit}
  isLoading={isSubmitting}
  isValid={formData.name && formData.email}
>
  <Input value={formData.name} onChange={handleChange} />
</MobileForm>
```

## üö® Common Anti-Patterns to Avoid

1. **‚ùå Manual API calls** - Use useResource instead
2. **‚ùå Repetitive CRUD logic** - Use established hooks
3. **‚ùå Desktop-only UI** - Always mobile-first
4. **‚ùå Online-only features** - Must work offline
5. **‚ùå Reinventing components** - Check ui/ directory first
6. **‚ùå Manual loading states** - Use hook loading states
7. **‚ùå Inconsistent naming** - Follow kebab-case convention

## üéâ Success Metrics

When following these patterns, you should achieve:
- **70%+ code reduction** through DRY principles
- **Offline functionality** with background sync
- **Mobile-native feel** with touch interactions
- **Sub-second perceived performance** with optimistic updates
- **Consistent UX** across all features

---

**Remember**: Always think DRY first, check existing components, build offline-first, and make it mobile-beautiful! üöÄ
