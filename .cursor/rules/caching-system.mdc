# Caching System - IndexedDB + TanStack React Query Action-Based

## üöÄ System Overview

This codebase uses an **offline-first caching system** with IndexedDB for persistent storage and TanStack React Query for optimistic updates, providing Linear/Vercel-quality performance and offline capabilities through a single action endpoint.

## üìÅ Architecture

### Core Caching Components
```
lib/api/
‚îú‚îÄ‚îÄ action-client.ts         # IndexedDB + offline-first client
‚îî‚îÄ‚îÄ ...

lib/hooks/
‚îú‚îÄ‚îÄ use-action-api.ts        # TanStack Query + action hooks
‚îú‚îÄ‚îÄ use-offline-sync.ts      # Offline synchronization
‚îî‚îÄ‚îÄ use-auto-save.ts         # Auto-save functionality
```

### Cache Provider Integration
```typescript
// components/providers/cache-provider.tsx
import { CacheProvider } from '@/components/providers/cache-provider';

function App() {
  return (
    <CacheProvider>
      {/* Your app components */}
    </CacheProvider>
  );
}
```

## üîß How to Use the Caching System

### 1. Basic Cached Resource Usage

```typescript
import { useTeams, useCreateTeam, useUpdateTeam, useDeleteTeam } from '@/lib/hooks';

function TeamsPage() {
  // Query data (cached in IndexedDB)
  const { data: teams, isLoading, error } = useTeams();
  
  // Mutations with optimistic updates
  const { createTeam, isPending: isCreating } = useCreateTeam();
  const { updateTeam, isPending: isUpdating } = useUpdateTeam();
  const { deleteTeam, isPending: isDeleting } = useDeleteTeam();

  const handleCreateTeam = async (data: TeamCreateData) => {
    // UI updates instantly, then syncs to server
    await createTeam(data);
    
    // If server request fails, UI automatically reverts
    // If offline, change is queued for later sync
  };

  return (
    <div>
      {/* Your UI */}
    </div>
  );
}
```

### 2. Offline Status Monitoring

```typescript
import { useOfflineStatus } from '@/lib/hooks';

function OfflineIndicator() {
  const { isOffline, pendingCount } = useOfflineStatus();
  
  return isOffline ? (
    <div className="bg-yellow-100 p-2 text-center">
      Offline ({pendingCount} pending actions)
    </div>
  ) : null;
}
```

### 3. All Available Resource Hooks

```typescript
// Query hooks (cached in IndexedDB)
import { 
  useTeams, 
  useProjects, 
  useLabels, 
  useMembers, 
  useIssueTypes, 
  useStates,
  useIssues,
  useComments 
} from '@/lib/hooks';

// Mutation hooks (with optimistic updates)
import { 
  useCreateTeam, useUpdateTeam, useDeleteTeam,
  useCreateProject, useUpdateProject, useDeleteProject,
  useCreateLabel, useUpdateLabel, useDeleteLabel,
  useCreateMember, useUpdateMember, useDeleteMember,
  useCreateIssueType, useUpdateIssueType, useDeleteIssueType,
  useCreateState, useUpdateState, useDeleteState,
  useCreateIssue, useUpdateIssue, useDeleteIssue,
  useCreateComment, useUpdateComment, useDeleteComment
} from '@/lib/hooks';

// Utility hooks
import { useOfflineStatus, useOptimisticUpdate, useCacheInvalidation } from '@/lib/hooks';
```

## üéØ Key Features

### Offline-First Capabilities
- **IndexedDB Storage**: Persistent client-side storage
- **Automatic Sync**: Queues operations when offline
- **Optimistic Updates**: Instant UI updates with rollback
- **Smart Prefetching**: Route-based data prefetching

### Performance Optimizations
- **Single Action Endpoint**: Ultra-fast API responses
- **Stale-While-Revalidate**: Show cached data while fetching updates
- **Background Sync**: Sync data in background
- **Deduplication**: Prevent duplicate requests
- **Intelligent Caching**: TTL-based cache invalidation

## ‚ö†Ô∏è Important Patterns

### DO:
- Use resource-specific hooks: `useTeams()`, `useProjects()`, etc.
- Handle offline states with `useOfflineStatus()`
- Leverage optimistic updates for instant UI feedback
- Use proper error boundaries for cache errors

### DON'T:
- Access IndexedDB directly (use hooks)
- Skip offline state handling
- Make assumptions about data freshness
- Create new API routes (use single action endpoint)

## üîó Available Operations

### Query Hooks Pattern
```typescript
const { data, isLoading, error, refetch } = useTeams();

// Available properties:
data            // Array of cached items
isLoading       // Loading state
error           // Error state
refetch         // Manual refetch function
```

### Mutation Hooks Pattern
```typescript
const { createTeam, isPending, error } = useCreateTeam();

// Available properties:
createTeam      // Mutation function
isPending       // Loading state
error           // Error state
```

### Offline Status Hook
```typescript
const { isOffline, pendingCount } = useOfflineStatus();

// Available properties:
isOffline       // Boolean offline status
pendingCount    // Number of pending actions
```

## üöÄ Advanced Usage

### Custom Error Handling
```typescript
const { data: teams, error } = useTeams();

if (error) {
  console.error('Failed to load teams:', error);
  // Handle error appropriately
}
```

### Manual Cache Invalidation
```typescript
import { useCacheInvalidation } from '@/lib/hooks';

const { invalidateTeams } = useCacheInvalidation();

// Manually invalidate cache
invalidateTeams();
```

### Optimistic Updates with Rollback
```typescript
const { updateTeam } = useUpdateTeam();

const handleUpdate = async (id: string, data: Partial<Team>) => {
  try {
    // UI updates instantly with optimistic value
    await updateTeam(id, data);
    
    // Success! Changes are persisted
  } catch (error) {
    // Failure! UI automatically reverts to previous state
    console.error('Update failed:', error);
  }
};
```

## üìä Performance Benefits

The action-based caching system provides:
- **3-5x faster** than traditional REST APIs
- **Instant offline support** with IndexedDB
- **Optimistic updates** for immediate UI feedback
- **Automatic batching** of multiple operations
- **Zero boilerplate** - just configuration

This caching system provides Linear/Vercel-quality offline-first performance with intelligent synchronization and optimistic updates through a single ultra-fast action endpoint.
